package nl.ou.testar.tgherkin;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;

import org.antlr.v4.runtime.tree.TerminalNode;

import nl.ou.testar.tgherkin.gen.TgherkinParser;
import nl.ou.testar.tgherkin.gen.TgherkinParserBaseVisitor;
import nl.ou.testar.tgherkin.model.Gesture;
import nl.ou.testar.tgherkin.model.MouseMoveGesture;
import nl.ou.testar.tgherkin.model.AnyGesture;
import nl.ou.testar.tgherkin.model.Argument;
import nl.ou.testar.tgherkin.model.Background;
import nl.ou.testar.tgherkin.model.BooleanArgument;
import nl.ou.testar.tgherkin.model.ClickGesture;
import nl.ou.testar.tgherkin.model.ConditionalGesture;
import nl.ou.testar.tgherkin.model.DataTable;
import nl.ou.testar.tgherkin.model.Document;
import nl.ou.testar.tgherkin.model.DoubleClickGesture;
import nl.ou.testar.tgherkin.model.DragGesture;
import nl.ou.testar.tgherkin.model.DropDownAtGesture;
import nl.ou.testar.tgherkin.model.Examples;
import nl.ou.testar.tgherkin.model.Feature;
import nl.ou.testar.tgherkin.model.PlaceholderArgument;
import nl.ou.testar.tgherkin.model.RightClickGesture;
import nl.ou.testar.tgherkin.model.Scenario;
import nl.ou.testar.tgherkin.model.ScenarioDefinition;
import nl.ou.testar.tgherkin.model.ScenarioOutline;
import nl.ou.testar.tgherkin.model.Step;
import nl.ou.testar.tgherkin.model.StepRange;
import nl.ou.testar.tgherkin.model.StringArgument;
import nl.ou.testar.tgherkin.model.TableCell;
import nl.ou.testar.tgherkin.model.TableRow;
import nl.ou.testar.tgherkin.model.Tag;
import nl.ou.testar.tgherkin.model.TripleClickGesture;
import nl.ou.testar.tgherkin.model.TypeGesture;
import nl.ou.testar.tgherkin.model.WidgetCondition;
import nl.ou.testar.tgherkin.model.WidgetTreeCondition;

/**
 * The DocumentBuilder class creates the corresponding model of a Tgherkin text file.
 * This class uses the visitor patter to traverse the parse result.
 * The TgherkinParserBaseVisitor superclass is generated by ANTLR. 
 *
 */
public class DocumentBuilder extends TgherkinParserBaseVisitor<Object> {

	/**
	 * Data separator meta.
	 */
	public static final String DATA_SEPARTATOR_META = "\\|";
	private List<WidgetCondition> widgetConditions;
	private Queue<WidgetCondition.Type> operatorQueue = new LinkedList<WidgetCondition.Type>();

	@Override 
	public Document visitDocument(TgherkinParser.DocumentContext ctx) { 
		List<Feature> features = new ArrayList<Feature>();
		for (TgherkinParser.FeatureContext featureContext : ctx.feature()){
			features.add(visitFeature(featureContext));
		}
		Document document = new Document(features);
		return document;
	}

	@Override 
	public Feature visitFeature(TgherkinParser.FeatureContext ctx) {
		List<Tag> tags = new ArrayList<Tag>();
		for (TgherkinParser.TagnameContext tagnameContext : ctx.tags) {
			tags.add(visitTagname(tagnameContext));
		}		
		String title = null;
		if (ctx.title() != null) {
			title = visitTitle(ctx.title());
		}
		String narrative = getNarrative(ctx.narrative);
		List<ConditionalGesture> selection = new ArrayList<ConditionalGesture>();
		if (ctx.selection() != null) {
			for (TgherkinParser.Conditional_gestureContext  conditionalGestureContext : ctx.selection().conditional_gestures) {
				selection.add(visitConditional_gesture(conditionalGestureContext));
			}
		}
		WidgetTreeCondition oracle = null;
		if (ctx.oracle() != null) {
			oracle = visitOracle(ctx.oracle());
		}
		Background background = null;
		if (ctx.background() != null) {
			background = visitBackground(ctx.background());
		}
		List<ScenarioDefinition> scenarioDefinitions = new ArrayList<ScenarioDefinition>();
		for (TgherkinParser.ScenarioDefinitonContext scenarioDefinitionContext : ctx.scenarioDefiniton()) {
			scenarioDefinitions.add(visitScenarioDefiniton(scenarioDefinitionContext));
		}		
		return new Feature(tags, title, narrative, selection, oracle, background, scenarioDefinitions); 
	}

	@Override 
	public Background visitBackground(TgherkinParser.BackgroundContext ctx) { 
		String title = null;
		if (ctx.title() != null) {
			title = visitTitle(ctx.title());
		}
		String narrative = getNarrative(ctx.narrative);
		List<ConditionalGesture> selection = new ArrayList<ConditionalGesture>();
		if (ctx.selection() != null) {		
			for (TgherkinParser.Conditional_gestureContext  conditionalGestureContext : ctx.selection().conditional_gestures) {
				selection.add(visitConditional_gesture(conditionalGestureContext));
			}
		}
		WidgetTreeCondition oracle = null;
		if (ctx.oracle() != null) {
			oracle = visitOracle(ctx.oracle());
		}
		List<Step> steps = new ArrayList<Step>();
		for (TgherkinParser.StepContext stepContext : ctx.steps) {
			steps.add(visitStep(stepContext));
		}		
		return new Background(title, narrative, selection, oracle, steps); 
	}

	@Override 
	public ScenarioDefinition visitScenarioDefiniton(TgherkinParser.ScenarioDefinitonContext ctx) { 
		if (ctx.scenario() != null) {
			return visitScenario(ctx.scenario());
		}
		if (ctx.scenarioOutline() != null) {
			return visitScenarioOutline(ctx.scenarioOutline());
		}
		throw new TgherkinException("Unknown ScenarioDefinition");
	}

	@Override 
	public Scenario visitScenario(TgherkinParser.ScenarioContext ctx) { 
		List<Tag> tags = new ArrayList<Tag>();
		for (TgherkinParser.TagnameContext tagnameContext : ctx.tags) {
			tags.add(visitTagname(tagnameContext));
		}		
		String title = null;
		if (ctx.title() != null) {
			title = visitTitle(ctx.title());
		}
		String narrative = getNarrative(ctx.narrative);	
		List<ConditionalGesture> selection = new ArrayList<ConditionalGesture>();	
		if (ctx.selection() != null) {
			for (TgherkinParser.Conditional_gestureContext  conditionalGestureContext : ctx.selection().conditional_gestures) {
				selection.add(visitConditional_gesture(conditionalGestureContext));
			}
		}
		WidgetTreeCondition oracle = null;
		if (ctx.oracle() != null) {
			oracle = visitOracle(ctx.oracle());
		}
		List<Step> steps = new ArrayList<Step>();
		for (TgherkinParser.StepContext stepContext : ctx.steps) {
			steps.add(visitStep(stepContext));
		}		
		return new Scenario(tags, title, narrative, selection, oracle, steps); 
	}

	@Override 
	public ScenarioOutline visitScenarioOutline(TgherkinParser.ScenarioOutlineContext ctx) { 
		List<Tag> tags = new ArrayList<Tag>();
		for (TgherkinParser.TagnameContext tagnameContext : ctx.tags) {
			tags.add(visitTagname(tagnameContext));
		}		
		String title = null;
		if (ctx.title() != null) {
			title = visitTitle(ctx.title());
		}
		String narrative = getNarrative(ctx.narrative);	
		List<ConditionalGesture> selection = new ArrayList<ConditionalGesture>();
		if (ctx.selection() != null) {
			for (TgherkinParser.Conditional_gestureContext  conditionalGestureContext : ctx.selection().conditional_gestures) {
				selection.add(visitConditional_gesture(conditionalGestureContext));
			}
		}
		WidgetTreeCondition oracle = null;
		if (ctx.oracle() != null) {
			oracle = visitOracle(ctx.oracle());
		}
		List<Step> steps = new ArrayList<Step>();
		for (TgherkinParser.StepContext stepContext : ctx.steps) {
			steps.add(visitStep(stepContext));
		}		
		Examples examples = null;
		if (ctx.examples() != null) {
			examples = visitExamples(ctx.examples());
		}
		return new ScenarioOutline(tags, title, narrative, selection, oracle, steps, examples); 
	}

	@Override 
	public Examples visitExamples(TgherkinParser.ExamplesContext ctx) { 
		String title = null;
		if (ctx.title() != null) {
			title = visitTitle(ctx.title());
		}
		String narrative = getNarrative(ctx.narrative);		
		DataTable dataTable = null;
		if (ctx.table() != null) {
			dataTable = visitTable(ctx.table());
		}
		return new Examples(title, narrative, dataTable);
	}

	@Override 
	public DataTable visitTable(TgherkinParser.TableContext ctx) { 
		List<TableRow> tableRows = new ArrayList<TableRow>();
		for (TerminalNode terminalNode : ctx.TABLE_ROW()) {
			String tableRowString = terminalNode.getText().trim();
			String[] cells = tableRowString.split(DATA_SEPARTATOR_META);
			List<TableCell> tableCells = new ArrayList<TableCell>();
			// skip first group
			for (int i = 1; i < cells.length; i++) {
				String value = cells[i].trim(); 
				tableCells.add(new TableCell(value));
			}
			tableRows.add(new TableRow(tableCells));
		}
		DataTable dataTable = null;
		if (tableRows.size() > 0) {
			dataTable = new DataTable(tableRows);	
		}
		return dataTable; 
	}

	@Override 
	public String visitTitle(TgherkinParser.TitleContext ctx) { 
		return ctx.getText().trim(); 
	}

	@Override 
	public String visitNarrativeLine(TgherkinParser.NarrativeLineContext ctx) { 
		return ctx.getText();		
	}

	@Override 
	public Tag visitTagname(TgherkinParser.TagnameContext ctx) { 
		return new Tag(ctx.TAGNAME().getText()); 
	}
	
	@Override public WidgetTreeCondition visitOracle(TgherkinParser.OracleContext ctx) {
		widgetConditions = new ArrayList<WidgetCondition>();
		operatorQueue.add(null);
		if (ctx.widget_tree_condition() != null) {
			visit(ctx.widget_tree_condition());
		}
		return new WidgetTreeCondition(widgetConditions);
	}
	
	
	@Override 
	public Step visitStep(TgherkinParser.StepContext ctx) { 
		String title = null;
		if (ctx.title() != null) {
			title = visitTitle(ctx.title());
		}
		WidgetTreeCondition givenCondition = null;
		if (ctx.givenClause() != null) {
			givenCondition = visitGivenClause(ctx.givenClause());
		}
		List<ConditionalGesture> whenGestures = new ArrayList<ConditionalGesture>();
		if (ctx.whenClause() != null) {
			for (TgherkinParser.Conditional_gestureContext  conditionalGestureContext : ctx.whenClause().conditional_gestures) {
				whenGestures.add(visitConditional_gesture(conditionalGestureContext));
			}		
		}
		WidgetTreeCondition thenCondition = null;
		if (ctx.thenClause() != null) {
			thenCondition = visitThenClause(ctx.thenClause());
		}
		if (ctx.stepRange() != null) {
			int fromRange = Integer.valueOf(ctx.stepRange().from.getText());
			int toRange = Integer.valueOf(ctx.stepRange().to.getText());
			return new StepRange(title, fromRange, toRange, givenCondition, whenGestures, thenCondition);
		}		
		return new Step(title, givenCondition, whenGestures, thenCondition); 
	}

	@Override 
	public WidgetTreeCondition visitGivenClause(TgherkinParser.GivenClauseContext ctx) { 
		widgetConditions = new ArrayList<WidgetCondition>();
		operatorQueue.add(null);
		if (ctx.widget_tree_condition() != null) {
			visit(ctx.widget_tree_condition());
		}
		return new WidgetTreeCondition(widgetConditions); 
	}

	@Override 
	public WidgetTreeCondition visitThenClause(TgherkinParser.ThenClauseContext ctx) { 
		widgetConditions = new ArrayList<WidgetCondition>();
		operatorQueue.add(null);
		if (ctx.widget_tree_condition() != null) {
			visit(ctx.widget_tree_condition());
		}
		return new WidgetTreeCondition(widgetConditions); 
	}

	@Override 
	public Object visitWidgetCondition(TgherkinParser.WidgetConditionContext ctx) {
		WidgetCondition.Type  type = operatorQueue.poll();
		String code = ctx.getText();
		WidgetCondition widgetCondition = new WidgetCondition(type, code);
		widgetConditions.add(widgetCondition);
		return visitChildren(ctx);
	}

	@Override 
	public Object visitWidgetTreeConditionEither(TgherkinParser.WidgetTreeConditionEitherContext ctx) { 
		operatorQueue.add(WidgetCondition.Type.EITHER);
		return visitChildren(ctx); 
	}

	@Override 
	public Object visitWidgetTreeConditionAlso(TgherkinParser.WidgetTreeConditionAlsoContext ctx) { 
		operatorQueue.add(WidgetCondition.Type.ALSO);
		return visitChildren(ctx); 
	}

	@Override 
	public ConditionalGesture visitConditional_gesture(TgherkinParser.Conditional_gestureContext ctx) { 
		WidgetCondition widgetCondition = null;
		if (ctx.widget_condition() != null) {
			String code = ctx.widget_condition().getText();
			widgetCondition = new WidgetCondition(null, code); 
		}
		Gesture gesture = null;
		if (ctx.gesture() != null) {
			gesture = visitGesture(ctx.gesture());
		}
		return new ConditionalGesture(widgetCondition, gesture); 
	}
	
	@Override 
	public Gesture visitGesture(TgherkinParser.GestureContext ctx) { 
		return (Gesture)visitChildren(ctx);
	}

	@Override 
	public TypeGesture visitTypeGesture(TgherkinParser.TypeGestureContext ctx) { 
		List<Argument> arguments = new ArrayList<Argument>();
		if (ctx.PLACEHOLDER() != null) {
			// use placeholder name without enclosing angular brackets
			arguments.add(new PlaceholderArgument(ctx.PLACEHOLDER().getText().substring(1, ctx.PLACEHOLDER().getText().length() - 1)));
		}
		if (ctx.STRING() != null) {
			// string without enclosing quotes
			arguments.add(new StringArgument(ctx.STRING().getText().substring(1, ctx.STRING().getText().length() - 1))); 
		}
		return new TypeGesture(arguments);
	}
	
	@Override
	public ClickGesture visitClickGesture(TgherkinParser.ClickGestureContext ctx) {
		List<Argument> arguments = new ArrayList<Argument>();
		if (ctx.PLACEHOLDER() != null) {
			// use placeholder name without enclosing angular brackets
			arguments.add(new PlaceholderArgument(ctx.PLACEHOLDER().getText().substring(1, ctx.PLACEHOLDER().getText().length() - 1)));
		}else {
			if (ctx.TRUE() != null) {
				arguments.add(new BooleanArgument(true)); 
			}else {
				if (ctx.FALSE() != null) {
					arguments.add(new BooleanArgument(false)); 
				}				
			}
		}
		return new ClickGesture(arguments);		
	}
	
	@Override
	public DoubleClickGesture visitDoubleClickGesture(TgherkinParser.DoubleClickGestureContext ctx) {
		List<Argument> arguments = new ArrayList<Argument>();
		if (ctx.PLACEHOLDER() != null) {
			// use placeholder name without enclosing angular brackets
			arguments.add(new PlaceholderArgument(ctx.PLACEHOLDER().getText().substring(1, ctx.PLACEHOLDER().getText().length() - 1)));
		}else {
			if (ctx.TRUE() != null) {
				arguments.add(new BooleanArgument(true)); 
			}else {
				if (ctx.FALSE() != null) {
					arguments.add(new BooleanArgument(false)); 
				}				
			}
		}
		return new DoubleClickGesture(arguments);		
	}
	
	@Override
	public TripleClickGesture visitTripleClickGesture(TgherkinParser.TripleClickGestureContext ctx) {
		List<Argument> arguments = new ArrayList<Argument>();
		if (ctx.PLACEHOLDER() != null) {
			// use placeholder name without enclosing angular brackets
			arguments.add(new PlaceholderArgument(ctx.PLACEHOLDER().getText().substring(1, ctx.PLACEHOLDER().getText().length() - 1)));
		}else {
			if (ctx.TRUE() != null) {
				arguments.add(new BooleanArgument(true)); 
			}else {
				if (ctx.FALSE() != null) {
					arguments.add(new BooleanArgument(false)); 
				}				
			}
		}
		return new TripleClickGesture(arguments);		
	}
	
	
	@Override 
	public Gesture visitParameterlessGesture(TgherkinParser.ParameterlessGestureContext ctx) { 
		if (ctx.gestureName() == null) {
			return null;
		}	
		List<Argument> arguments = new ArrayList<Argument>();
		if (ctx.gestureName().ANY_NAME() != null) {
			return new AnyGesture(arguments);
		}
		if (ctx.gestureName().DRAG_NAME() != null) {
			return new DragGesture(arguments);
		}
		if (ctx.gestureName().RIGHT_CLICK_NAME() != null) {
			return new RightClickGesture(arguments);
		}
		if (ctx.gestureName().MOUSE_MOVE_NAME() != null) {
			return new MouseMoveGesture(arguments);
		}
		if (ctx.gestureName().DROP_DOWN_AT_NAME() != null) {
			return new DropDownAtGesture(arguments);
		}
		return null;
	}
	
	private String getNarrative(List<TgherkinParser.NarrativeLineContext> list) {
		String narrative = null;
		if (list.size() > 0) {
			StringBuilder lines = new StringBuilder();
			for (int index=0;index < list.size();index++) {
				if (index > 0) {
					lines.append(System.getProperty("line.separator"));
				}
				lines.append(visitNarrativeLine(list.get(index)).trim());
			}
			narrative = lines.toString();
		}
		return narrative;
	}

}
