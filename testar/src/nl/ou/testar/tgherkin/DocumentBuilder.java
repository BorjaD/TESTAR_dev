package nl.ou.testar.tgherkin;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import nl.ou.testar.tgherkin.gen.TgherkinParser;
import nl.ou.testar.tgherkin.gen.TgherkinParser.HitKeyArgumentContext;
import nl.ou.testar.tgherkin.gen.TgherkinParserBaseVisitor;

import nl.ou.testar.tgherkin.model.AnyGesture;
import nl.ou.testar.tgherkin.model.Background;
import nl.ou.testar.tgherkin.model.ClickGesture;
import nl.ou.testar.tgherkin.model.ConditionalGesture;
import nl.ou.testar.tgherkin.model.ConditionalRepeatingStep;
import nl.ou.testar.tgherkin.model.DataTable;
import nl.ou.testar.tgherkin.model.Document;
import nl.ou.testar.tgherkin.model.DoubleClickGesture;
import nl.ou.testar.tgherkin.model.DragDropGesture;
import nl.ou.testar.tgherkin.model.DragSliderGesture;
import nl.ou.testar.tgherkin.model.DropDownAtGesture;
import nl.ou.testar.tgherkin.model.Examples;
import nl.ou.testar.tgherkin.model.Feature;
import nl.ou.testar.tgherkin.model.Gesture;
import nl.ou.testar.tgherkin.model.HitKeyGesture;
import nl.ou.testar.tgherkin.model.MouseMoveGesture;
import nl.ou.testar.tgherkin.model.NumberOfTimesRepeatingStep;
import nl.ou.testar.tgherkin.model.ParameterBase;
import nl.ou.testar.tgherkin.model.Parameters;
import nl.ou.testar.tgherkin.model.RightClickGesture;
import nl.ou.testar.tgherkin.model.Scenario;
import nl.ou.testar.tgherkin.model.ScenarioDefinition;
import nl.ou.testar.tgherkin.model.ScenarioOutline;
import nl.ou.testar.tgherkin.model.Step;
import nl.ou.testar.tgherkin.model.TableCell;
import nl.ou.testar.tgherkin.model.TableRow;
import nl.ou.testar.tgherkin.model.Tag;
import nl.ou.testar.tgherkin.model.TripleClickGesture;
import nl.ou.testar.tgherkin.model.TypeGesture;
import nl.ou.testar.tgherkin.model.WhenClause;
import nl.ou.testar.tgherkin.model.WidgetCondition;
import nl.ou.testar.tgherkin.model.WidgetTreeCondition;
import org.antlr.v4.runtime.tree.TerminalNode;

/**
 * The DocumentBuilder class creates the corresponding model of a Tgherkin text file.
 * This class uses the visitor patter to traverse the parse result.
 * The TgherkinParserBaseVisitor superclass is generated by ANTLR. 
 *
 */
public class DocumentBuilder extends TgherkinParserBaseVisitor<Object> {
	
	/**
	 * Data separator meta.
	 */
	public static final String DATA_SEPARTATOR_META = "\\|";

	private class ExecOptions {
		private List<Tag> excludeTags;
		private List<Tag> includeTags;

		private ExecOptions(List<Tag> excludeTags, List<Tag> includeTags) {
			super();
			this.excludeTags = excludeTags;
			this.includeTags = includeTags;
		}

		private List<Tag> getExcludeTags() {
			return excludeTags;
		}

		private List<Tag> getIncludeTags() {
			return includeTags;
		}
	}

	private ExecOptions execOptions;
	private List<WidgetCondition> widgetConditions;
	private Queue<WidgetCondition.Type> operatorQueue = new LinkedList<WidgetCondition.Type>();

	@Override 
	public Document visitDocument(TgherkinParser.DocumentContext ctx) { 
		if (ctx.execOptions() != null) {
			execOptions = visitExecOptions(ctx.execOptions());	
		}
		List<Feature> features = new ArrayList<Feature>();
		for (TgherkinParser.FeatureContext featureContext : ctx.feature()){
			Feature feature = visitFeature(featureContext);
			if (feature != null) {
				features.add(feature);
			}
		}
		Document document = new Document(features);
		return document;
	}

	@Override
	public ExecOptions visitExecOptions(TgherkinParser.ExecOptionsContext ctx) {
		List<Tag> excludeTags;
		List<Tag> includeTags;
		if (ctx.execOptionExclude() != null) {
			excludeTags = visitExecOptionExclude(ctx.execOptionExclude()); 
		} else {
			excludeTags = new ArrayList<Tag>();
		}
		if (ctx.execOptionInclude() != null) {
			includeTags = visitExecOptionInclude(ctx.execOptionInclude());
		} else {
			includeTags = new ArrayList<Tag>();
		}
		return new ExecOptions(excludeTags, includeTags);
	}

	@Override
	public List<Tag> visitExecOptionExclude(TgherkinParser.ExecOptionExcludeContext ctx) {
		List<Tag> tags = new ArrayList<Tag>();		
		for (TerminalNode terminalNode : ctx.TAGNAME()) {
			tags.add(new Tag(terminalNode.getText()));
		}		
		return tags;
	}

	@Override
	public List<Tag> visitExecOptionInclude(TgherkinParser.ExecOptionIncludeContext ctx) {
		List<Tag> tags = new ArrayList<Tag>();		
		for (TerminalNode terminalNode : ctx.TAGNAME()) {
			tags.add(new Tag(terminalNode.getText()));
		}		
		return tags;		
	}

	@Override 
	public Feature visitFeature(TgherkinParser.FeatureContext ctx) {
		List<Tag> tags = new ArrayList<Tag>();
		for (TgherkinParser.TagnameContext tagnameContext : ctx.tags) {
			tags.add(visitTagname(tagnameContext));
		}		
		String title = null;
		if (ctx.title() != null) {
			title = visitTitle(ctx.title());
		}
		String narrative = getNarrative(ctx.narrative);
		List<ConditionalGesture> selection = new ArrayList<ConditionalGesture>();
		if (ctx.selection() != null) {
			for (TgherkinParser.Conditional_gestureContext  conditionalGestureContext : ctx.selection().conditional_gestures) {
				selection.add(visitConditional_gesture(conditionalGestureContext));
			}
		}
		WidgetTreeCondition oracle = null;
		if (ctx.oracle() != null) {
			oracle = visitOracle(ctx.oracle());
		}
		Background background = null;
		if (ctx.background() != null) {
			background = visitBackground(ctx.background());
		}
		List<ScenarioDefinition> scenarioDefinitions = new ArrayList<ScenarioDefinition>();
		for (TgherkinParser.ScenarioDefinitonContext scenarioDefinitionContext : ctx.scenarioDefiniton()) {
			ScenarioDefinition scenarioDefinition = visitScenarioDefiniton(scenarioDefinitionContext);
			boolean select = true;
			if (scenarioDefinition instanceof Scenario) {
				select = select(execOptions, tags, ((Scenario)scenarioDefinition).getTags());
			}
			if (scenarioDefinition instanceof ScenarioOutline) {
				select = select(execOptions, tags, ((ScenarioOutline)scenarioDefinition).getTags());
			}
			if (select) {
				// only add scenario definitions defined by execution option to model
				scenarioDefinitions.add(scenarioDefinition);
			}
		}		
		if (scenarioDefinitions.size() == 0) {
			// no scenarios selected for the execution option settings.
			return null;
		}
		return new Feature(tags, title, narrative, selection, oracle, background, scenarioDefinitions); 
	}

	@Override 
	public Background visitBackground(TgherkinParser.BackgroundContext ctx) { 
		String title = null;
		if (ctx.title() != null) {
			title = visitTitle(ctx.title());
		}
		String narrative = getNarrative(ctx.narrative);
		List<ConditionalGesture> selection = new ArrayList<ConditionalGesture>();
		if (ctx.selection() != null) {		
			for (TgherkinParser.Conditional_gestureContext  conditionalGestureContext : ctx.selection().conditional_gestures) {
				selection.add(visitConditional_gesture(conditionalGestureContext));
			}
		}
		WidgetTreeCondition oracle = null;
		if (ctx.oracle() != null) {
			oracle = visitOracle(ctx.oracle());
		}
		List<Step> steps = new ArrayList<Step>();
		for (TgherkinParser.StepContext stepContext : ctx.steps) {
			steps.add(visitStep(stepContext));
		}		
		return new Background(title, narrative, selection, oracle, steps); 
	}

	@Override 
	public ScenarioDefinition visitScenarioDefiniton(TgherkinParser.ScenarioDefinitonContext ctx) { 
		if (ctx.scenario() != null) {
			return visitScenario(ctx.scenario());
		}
		if (ctx.scenarioOutline() != null) {
			return visitScenarioOutline(ctx.scenarioOutline());
		}
		throw new TgherkinException("Unknown ScenarioDefinition");
	}

	@Override 
	public Scenario visitScenario(TgherkinParser.ScenarioContext ctx) { 
		List<Tag> tags = new ArrayList<Tag>();
		for (TgherkinParser.TagnameContext tagnameContext : ctx.tags) {
			tags.add(visitTagname(tagnameContext));
		}		
		String title = null;
		if (ctx.title() != null) {
			title = visitTitle(ctx.title());
		}
		String narrative = getNarrative(ctx.narrative);	
		List<ConditionalGesture> selection = new ArrayList<ConditionalGesture>();	
		if (ctx.selection() != null) {
			for (TgherkinParser.Conditional_gestureContext  conditionalGestureContext : ctx.selection().conditional_gestures) {
				selection.add(visitConditional_gesture(conditionalGestureContext));
			}
		}
		WidgetTreeCondition oracle = null;
		if (ctx.oracle() != null) {
			oracle = visitOracle(ctx.oracle());
		}
		List<Step> steps = new ArrayList<Step>();
		for (TgherkinParser.StepContext stepContext : ctx.steps) {
			steps.add(visitStep(stepContext));
		}		
		return new Scenario(tags, title, narrative, selection, oracle, steps); 
	}

	@Override 
	public ScenarioOutline visitScenarioOutline(TgherkinParser.ScenarioOutlineContext ctx) { 
		List<Tag> tags = new ArrayList<Tag>();
		for (TgherkinParser.TagnameContext tagnameContext : ctx.tags) {
			tags.add(visitTagname(tagnameContext));
		}		
		String title = null;
		if (ctx.title() != null) {
			title = visitTitle(ctx.title());
		}
		String narrative = getNarrative(ctx.narrative);	
		List<ConditionalGesture> selection = new ArrayList<ConditionalGesture>();
		if (ctx.selection() != null) {
			for (TgherkinParser.Conditional_gestureContext  conditionalGestureContext : ctx.selection().conditional_gestures) {
				selection.add(visitConditional_gesture(conditionalGestureContext));
			}
		}
		WidgetTreeCondition oracle = null;
		if (ctx.oracle() != null) {
			oracle = visitOracle(ctx.oracle());
		}
		List<Step> steps = new ArrayList<Step>();
		for (TgherkinParser.StepContext stepContext : ctx.steps) {
			steps.add(visitStep(stepContext));
		}		
		Examples examples = null;
		if (ctx.examples() != null) {
			examples = visitExamples(ctx.examples());
		}
		return new ScenarioOutline(tags, title, narrative, selection, oracle, steps, examples); 
	}

	@Override 
	public Examples visitExamples(TgherkinParser.ExamplesContext ctx) { 
		String title = null;
		if (ctx.title() != null) {
			title = visitTitle(ctx.title());
		}
		String narrative = getNarrative(ctx.narrative);		
		DataTable dataTable = null;
		if (ctx.table() != null) {
			dataTable = visitTable(ctx.table());
		}
		return new Examples(title, narrative, dataTable);
	}

	@Override 
	public DataTable visitTable(TgherkinParser.TableContext ctx) { 
		List<TableRow> tableRows = new ArrayList<TableRow>();
		for (TerminalNode terminalNode : ctx.TABLE_ROW()) {
			String tableRowString = terminalNode.getText().trim();
			String[] cells = tableRowString.split(DATA_SEPARTATOR_META);
			List<TableCell> tableCells = new ArrayList<TableCell>();
			// skip first group
			for (int i = 1; i < cells.length; i++) {
				String value = cells[i].trim(); 
				tableCells.add(new TableCell(value));
			}
			tableRows.add(new TableRow(tableCells));
		}
		DataTable dataTable = null;
		if (tableRows.size() > 0) {
			dataTable = new DataTable(tableRows);	
		}
		return dataTable; 
	}

	@Override 
	public String visitTitle(TgherkinParser.TitleContext ctx) { 
		return ctx.getText().trim(); 
	}

	@Override 
	public String visitNarrativeLine(TgherkinParser.NarrativeLineContext ctx) { 
		return ctx.getText();		
	}

	@Override 
	public Tag visitTagname(TgherkinParser.TagnameContext ctx) { 
		return new Tag(ctx.TAGNAME().getText()); 
	}
	
	@Override public WidgetTreeCondition visitOracle(TgherkinParser.OracleContext ctx) {
		widgetConditions = new ArrayList<WidgetCondition>();
		operatorQueue.add(null);
		if (ctx.widget_tree_condition() != null) {
			visit(ctx.widget_tree_condition());
		}
		return new WidgetTreeCondition(widgetConditions);
	}
	
	
	@Override 
	public Step visitStep(TgherkinParser.StepContext ctx) { 
		String title = null;
		if (ctx.title() != null) {
			title = visitTitle(ctx.title());
		}
		WidgetTreeCondition givenCondition = null;
		if (ctx.givenClause() != null) {
			givenCondition = visitGivenClause(ctx.givenClause());
		}
		WhenClause whenClause = null;
		if (ctx.whenClause() != null) {
			whenClause = visitWhenClause(ctx.whenClause());
		}
		WidgetTreeCondition thenCondition = null;
		if (ctx.thenClause() != null) {
			thenCondition = visitThenClause(ctx.thenClause());
		}
		if (ctx.stepIteration() != null) {
			if (ctx.stepIteration().stepRange() != null) {
				int fromRange = Integer.valueOf(ctx.stepIteration().stepRange().from.getText());
				int toRange = Integer.valueOf(ctx.stepIteration().stepRange().to.getText());
				return new NumberOfTimesRepeatingStep(title, fromRange, toRange, givenCondition, whenClause, thenCondition);
			}
			if (ctx.stepIteration().stepWhile() != null) {
				widgetConditions = new ArrayList<WidgetCondition>();
				operatorQueue.add(null);
				if (ctx.stepIteration().stepWhile().widget_tree_condition() != null) {
					visit(ctx.stepIteration().stepWhile().widget_tree_condition());
				}
				return new ConditionalRepeatingStep(title, ConditionalRepeatingStep.Type.WHILE_STEP, new WidgetTreeCondition(widgetConditions), givenCondition, whenClause, thenCondition);
			}
			if (ctx.stepIteration().stepRepeatUntil() != null) {
				widgetConditions = new ArrayList<WidgetCondition>();
				operatorQueue.add(null);
				if (ctx.stepIteration().stepRepeatUntil().widget_tree_condition() != null) {
					visit(ctx.stepIteration().stepRepeatUntil().widget_tree_condition());
				}
				return new ConditionalRepeatingStep(title, ConditionalRepeatingStep.Type.REPEAT_UNTIL_STEP, new WidgetTreeCondition(widgetConditions), givenCondition, whenClause, thenCondition);
			}
		}		
		return new Step(title, givenCondition, whenClause, thenCondition); 
	}

	@Override 
	public WidgetTreeCondition visitStepNOP(TgherkinParser.StepNOPContext ctx) { 
		widgetConditions = new ArrayList<WidgetCondition>();
		operatorQueue.add(null);
		if (ctx.widget_tree_condition() != null) {
			visit(ctx.widget_tree_condition());
		} else {
			// no condition defined: always true
			widgetConditions.add(new WidgetCondition("true"));
		}
		return new WidgetTreeCondition(widgetConditions); 
	}
	
	@Override 
	public WidgetTreeCondition visitGivenClause(TgherkinParser.GivenClauseContext ctx) { 
		widgetConditions = new ArrayList<WidgetCondition>();
		operatorQueue.add(null);
		if (ctx.widget_tree_condition() != null) {
			visit(ctx.widget_tree_condition());
		}
		return new WidgetTreeCondition(widgetConditions); 
	}

	@Override 
	public WhenClause visitWhenClause(TgherkinParser.WhenClauseContext ctx) {
		List<ConditionalGesture> conditionalGestures = new ArrayList<ConditionalGesture>();
		if (ctx.conditional_gesture() != null) {
			for (TgherkinParser.Conditional_gestureContext  conditionalGestureContext : ctx.conditional_gesture()) {
				conditionalGestures.add(visitConditional_gesture(conditionalGestureContext));
			}		
		}
		WidgetTreeCondition nopCondition = null;
		if (ctx.stepNOP() != null) {
			nopCondition = visitStepNOP(ctx.stepNOP());
		}		
		return new WhenClause(conditionalGestures, nopCondition); 
	}

	@Override 
	public WidgetTreeCondition visitThenClause(TgherkinParser.ThenClauseContext ctx) { 
		widgetConditions = new ArrayList<WidgetCondition>();
		operatorQueue.add(null);
		if (ctx.widget_tree_condition() != null) {
			visit(ctx.widget_tree_condition());
		}
		return new WidgetTreeCondition(widgetConditions); 
	}
	
	@Override 
	public Object visitWidgetCondition(TgherkinParser.WidgetConditionContext ctx) {
		WidgetCondition.Type  type = operatorQueue.poll();
		String code = ctx.getText();
		WidgetCondition widgetCondition = new WidgetCondition(type, code);
		widgetConditions.add(widgetCondition);
		return null;
	}

	@Override 
	public Object visitWidgetTreeConditionEither(TgherkinParser.WidgetTreeConditionEitherContext ctx) { 
		operatorQueue.add(WidgetCondition.Type.EITHER);
		return visitChildren(ctx); 
	}

	@Override 
	public Object visitWidgetTreeConditionAlso(TgherkinParser.WidgetTreeConditionAlsoContext ctx) { 
		operatorQueue.add(WidgetCondition.Type.ALSO);
		return visitChildren(ctx); 
	}

	@Override 
	public ConditionalGesture visitConditional_gesture(TgherkinParser.Conditional_gestureContext ctx) { 
		WidgetCondition widgetCondition = null;
		if (ctx.widget_condition() != null) {
			String code = ctx.widget_condition().getText();
			widgetCondition = new WidgetCondition(null, code); 
		}
		Gesture gesture = null;
		if (ctx.gesture() != null) {
			gesture = visitGesture(ctx.gesture());
		}
		return new ConditionalGesture(widgetCondition, gesture); 
	}
	
	@Override 
	public Gesture visitGesture(TgherkinParser.GestureContext ctx) { 
		return (Gesture)visitChildren(ctx);
	}

	@Override 
	public TypeGesture visitTypeGesture(TgherkinParser.TypeGestureContext ctx) { 
		ParameterBase parameterBase = new ParameterBase(); 
		if (ctx.PLACEHOLDER() != null) {
			// use placeholder name without enclosing angular brackets
			parameterBase.setPlaceholder(Parameters.TEXT, ctx.PLACEHOLDER().getText().substring(1, ctx.PLACEHOLDER().getText().length() - 1));
		}
		if (ctx.STRING() != null) {
			// string without enclosing quotes
			parameterBase.setValue(Parameters.TEXT, ctx.STRING().getText().substring(1, ctx.STRING().getText().length() - 1));
		}
		return new TypeGesture(parameterBase);
	}
	
	@Override
	public ClickGesture visitClickGesture(TgherkinParser.ClickGestureContext ctx) {
		ParameterBase parameterBase = new ParameterBase(); 
		if (ctx.PLACEHOLDER() != null) {
			// use placeholder name without enclosing angular brackets
			parameterBase.setPlaceholder(Parameters.UNCHECKED, ctx.PLACEHOLDER().getText().substring(1, ctx.PLACEHOLDER().getText().length() - 1));
		}else {
			if (ctx.TRUE() != null) {
				parameterBase.setValue(Parameters.UNCHECKED, true);
			}else {
				if (ctx.FALSE() != null) {
					parameterBase.setValue(Parameters.UNCHECKED, false);
				}				
			}
		}
		return new ClickGesture(parameterBase);		
	}
	
	@Override
	public DoubleClickGesture visitDoubleClickGesture(TgherkinParser.DoubleClickGestureContext ctx) {
		ParameterBase parameterBase = new ParameterBase(); 
		if (ctx.PLACEHOLDER() != null) {
			// use placeholder name without enclosing angular brackets
			parameterBase.setPlaceholder(Parameters.UNCHECKED, ctx.PLACEHOLDER().getText().substring(1, ctx.PLACEHOLDER().getText().length() - 1));
		}else {
			if (ctx.TRUE() != null) {
				parameterBase.setValue(Parameters.UNCHECKED, true);
			}else {
				if (ctx.FALSE() != null) {
					parameterBase.setValue(Parameters.UNCHECKED, false);
				}				
			}
		}
		return new DoubleClickGesture(parameterBase);		
	}
	
	@Override
	public TripleClickGesture visitTripleClickGesture(TgherkinParser.TripleClickGestureContext ctx) {
		ParameterBase parameterBase = new ParameterBase(); 
		if (ctx.PLACEHOLDER() != null) {
			// use placeholder name without enclosing angular brackets
			parameterBase.setPlaceholder(Parameters.UNCHECKED, ctx.PLACEHOLDER().getText().substring(1, ctx.PLACEHOLDER().getText().length() - 1));
		}else {
			if (ctx.TRUE() != null) {
				parameterBase.setValue(Parameters.UNCHECKED, true);
			}else {
				if (ctx.FALSE() != null) {
					parameterBase.setValue(Parameters.UNCHECKED, false);
				}				
			}
		}
		return new TripleClickGesture(parameterBase);		
	}
	
	@Override
	public AnyGesture visitAnyGesture(TgherkinParser.AnyGestureContext ctx) {
		ParameterBase parameterBase = new ParameterBase(); 
		if (ctx.PLACEHOLDER() != null) {
			// use placeholder name without enclosing angular brackets
			parameterBase.setPlaceholder(Parameters.UNCHECKED, ctx.PLACEHOLDER().getText().substring(1, ctx.PLACEHOLDER().getText().length() - 1));
		}else {
			if (ctx.TRUE() != null) {
				parameterBase.setValue(Parameters.UNCHECKED, true);
			}else {
				if (ctx.FALSE() != null) {
					parameterBase.setValue(Parameters.UNCHECKED, false);
				}				
			}
		}
		return new AnyGesture(parameterBase);		
	}
	
	@Override 
	public HitKeyGesture visitHitKeyGesture(TgherkinParser.HitKeyGestureContext ctx) { 
		ParameterBase parameterBase = new ParameterBase(); 
		for (HitKeyArgumentContext argumentCtx : ctx.hitKeyArgument()) {
			if (argumentCtx.KB_KEY_NAME() != null) {
				parameterBase.setValue(Parameters.KBKEYS, argumentCtx.KB_KEY_NAME().getText());
			}
			if (argumentCtx.PLACEHOLDER() != null) {
				// use placeholder name without enclosing angular brackets
				parameterBase.setPlaceholder(Parameters.KBKEYS, argumentCtx.PLACEHOLDER().getText().substring(1, argumentCtx.PLACEHOLDER().getText().length() - 1));
			}
		}
		return new HitKeyGesture(parameterBase);
	}
	
	@Override 
	public DragDropGesture visitDragDropGesture(TgherkinParser.DragDropGestureContext ctx) { 
		ParameterBase parameterBase = new ParameterBase(); 
		if (ctx.widget_condition() != null) {
			parameterBase.setValue(Parameters.WIDGET_CONITION, new WidgetCondition(ctx.widget_condition().getText()));
		}
		return new DragDropGesture(parameterBase);
	}
	
	
	
	@Override 
	public Gesture visitParameterlessGesture(TgherkinParser.ParameterlessGestureContext ctx) { 
		if (ctx.gestureName() == null) {
			return null;
		}	
		ParameterBase parameterBase = new ParameterBase(); 
		if (ctx.gestureName().DRAG_SLIDER_NAME() != null) {
			return new DragSliderGesture(parameterBase);
		}
		if (ctx.gestureName().RIGHT_CLICK_NAME() != null) {
			return new RightClickGesture(parameterBase);
		}
		if (ctx.gestureName().MOUSE_MOVE_NAME() != null) {
			return new MouseMoveGesture(parameterBase);
		}
		if (ctx.gestureName().DROP_DOWN_AT_NAME() != null) {
			return new DropDownAtGesture(parameterBase);
		}
		return null;
	}
	
	private String getNarrative(List<TgherkinParser.NarrativeLineContext> list) {
		String narrative = null;
		if (list.size() > 0) {
			StringBuilder lines = new StringBuilder();
			for (int index=0;index < list.size();index++) {
				if (index > 0) {
					lines.append(System.getProperty("line.separator"));
				}
				lines.append(visitNarrativeLine(list.get(index)).trim());
			}
			narrative = lines.toString();
		}
		return narrative;
	}

	private boolean select(ExecOptions execOptions, List<Tag> featureTags, List<Tag> scenarioTags) {
		if (execOptions == null) {
			// no execution option defined
			return true;
		}
		// search for matching exclude/include tag execution option in list of defined feature tags 
		if (execOptions.getExcludeTags().size() > 0 && matchingTagExists(execOptions.getExcludeTags(), featureTags) ) {
			return false;
		}
		if (execOptions.getIncludeTags().size() > 0 && matchingTagExists(execOptions.getIncludeTags(), featureTags) ) {
			return true;
		}
		// search for matching exclude/include tag execution option in list of defined scenario tags 
		if (execOptions.getExcludeTags().size() > 0 && matchingTagExists(execOptions.getExcludeTags(), scenarioTags) ) {
			return false;
		}
		if (execOptions.getIncludeTags().size() > 0 && matchingTagExists(execOptions.getIncludeTags(), scenarioTags) ) {
			return true;
		}
		// include option defined?
		if (execOptions.includeTags.size() > 0) {
			return false;
		}		
		return true;
	}
	
	private boolean matchingTagExists(List<Tag> optionTags, List<Tag> tags) {
		for(Tag optionTag : optionTags){
			for (Tag tag : tags){
				if (optionTag.getName().equals(tag.getName())) {
					return true;
				}
			}
		}		
		return false;
	}

}
